// theme-validator.js
// Script de validation du syst√®me de th√®me avanc√©
(function() {
    console.log('üîç [VALIDATION] D√©marrage de la validation du syst√®me de th√®me...');

    // Tests de fonctionnalit√©s
    const tests = {
        globalDataExists: false,
        themeExists: false,
        themeControllerExists: false,
        customPropertiesActive: false,
        autoStylesWorks: false,
        persistenceWorks: false
    };

    // Test 1: V√©rifier l'existence de globalData
    function testGlobalData() {
        tests.globalDataExists = typeof window.getGlobalData === 'function';
        console.log(tests.globalDataExists ? 
            '‚úÖ GlobalData: Fonction disponible' : 
            '‚ùå GlobalData: Fonction manquante');
        return tests.globalDataExists;
    }

    // Test 2: V√©rifier l'existence du th√®me
    function testTheme() {
        if (tests.globalDataExists) {
            const theme = window.getTheme();
            tests.themeExists = theme && theme.colors && theme.fonts && theme.spacing;
            console.log(tests.themeExists ? 
                '‚úÖ Th√®me: Structure compl√®te d√©tect√©e' : 
                '‚ùå Th√®me: Structure incompl√®te ou manquante');
            
            if (tests.themeExists) {
                console.log('üìã Couleur primaire:', theme.colors.primary);
                console.log('üìã Couleur accent:', theme.colors.accent1);
                console.log('üìã Font primaire:', theme.fonts.primary.split(',')[0]);
            }
        }
        return tests.themeExists;
    }

    // Test 3: V√©rifier le contr√¥leur de th√®me
    function testThemeController() {
        tests.themeControllerExists = typeof window.toggleThemeController === 'function' &&
                                     typeof window.updateCustomColor === 'function' &&
                                     typeof window.exportTheme === 'function';
        console.log(tests.themeControllerExists ? 
            '‚úÖ Contr√¥leur: Toutes les fonctions disponibles' : 
            '‚ùå Contr√¥leur: Fonctions manquantes');
        return tests.themeControllerExists;
    }

    // Test 4: V√©rifier les custom properties CSS
    function testCustomProperties() {
        const rootStyle = getComputedStyle(document.documentElement);
        const primaryVar = rootStyle.getPropertyValue('--theme-primary').trim();
        const accentVar = rootStyle.getPropertyValue('--theme-accent1').trim();
        
        tests.customPropertiesActive = primaryVar && accentVar;
        console.log(tests.customPropertiesActive ? 
            '‚úÖ Custom Properties: Variables CSS actives' : 
            '‚ùå Custom Properties: Variables CSS non d√©tect√©es');
        
        if (tests.customPropertiesActive) {
            console.log('üìã --theme-primary:', primaryVar);
            console.log('üìã --theme-accent1:', accentVar);
        }
        return tests.customPropertiesActive;
    }

    // Test 5: V√©rifier l'application automatique des styles
    function testAutoStyles() {
        if (typeof window.applyAutoThemeStyles === 'function') {
            try {
                const result = window.applyAutoThemeStyles();
                tests.autoStylesWorks = result === true;
                console.log(tests.autoStylesWorks ? 
                    '‚úÖ Styles Auto: Application r√©ussie' : 
                    '‚ùå Styles Auto: √âchec de l\'application');
            } catch (error) {
                tests.autoStylesWorks = false;
                console.log('‚ùå Styles Auto: Erreur -', error.message);
            }
        } else {
            tests.autoStylesWorks = false;
            console.log('‚ùå Styles Auto: Fonction non trouv√©e');
        }
        return tests.autoStylesWorks;
    }

    // Test 6: V√©rifier la persistance
    function testPersistence() {
        try {
            const localStorageData = localStorage.getItem('globalData');
            const parsedData = localStorageData ? JSON.parse(localStorageData) : null;
            tests.persistenceWorks = parsedData && parsedData.theme;
            
            console.log(tests.persistenceWorks ? 
                '‚úÖ Persistance: Donn√©es sauvegard√©es dans localStorage' : 
                '‚ùå Persistance: Aucune donn√©e trouv√©e dans localStorage');
        } catch (error) {
            tests.persistenceWorks = false;
            console.log('‚ùå Persistance: Erreur -', error.message);
        }
        return tests.persistenceWorks;
    }

    // Fonction de validation compl√®te
    function runFullValidation() {
        console.log('üöÄ [VALIDATION] Ex√©cution de tous les tests...');
        
        const results = {
            globalData: testGlobalData(),
            theme: testTheme(),
            controller: testThemeController(),
            customProperties: testCustomProperties(),
            autoStyles: testAutoStyles(),
            persistence: testPersistence()
        };

        // Calcul du score
        const passedTests = Object.values(results).filter(Boolean).length;
        const totalTests = Object.keys(results).length;
        const score = Math.round((passedTests / totalTests) * 100);

        // Rapport final
        console.log('\nüìä [VALIDATION] RAPPORT FINAL');
        console.log('================================');
        console.log(`Score global: ${score}% (${passedTests}/${totalTests})`);
        console.log('Tests pass√©s:', passedTests);
        console.log('Tests √©chou√©s:', totalTests - passedTests);

        // Affichage d√©taill√©
        Object.entries(results).forEach(([test, passed]) => {
            console.log(`${passed ? '‚úÖ' : '‚ùå'} ${test}`);
        });

        // Recommandations
        if (score === 100) {
            console.log('\nüéâ EXCELLENT! Syst√®me de th√®me enti√®rement fonctionnel!');
        } else if (score >= 80) {
            console.log('\n‚úÖ BIEN! Syst√®me de th√®me largement fonctionnel avec quelques am√©liorations possibles.');
        } else if (score >= 60) {
            console.log('\n‚ö†Ô∏è MOYEN! Syst√®me de th√®me partiellement fonctionnel, corrections n√©cessaires.');
        } else {
            console.log('\n‚ùå CRITIQUE! Syst√®me de th√®me d√©faillant, intervention requise.');
        }

        return { score, results, passedTests, totalTests };
    }

    // Fonction de diagnostic rapide
    function quickDiagnostic() {
        console.log('üî¨ [DIAGNOSTIC] Diagnostic rapide...');
        
        const elements = {
            themeController: document.getElementById('theme-controller'),
            customStyles: document.getElementById('theme-custom-properties'),
            navbar: document.querySelector('.navbar'),
            buttons: document.querySelectorAll('.btn').length,
            cards: document.querySelectorAll('.card').length
        };

        console.log('üìã √âl√©ments d√©tect√©s:');
        console.log('- Contr√¥leur de th√®me:', elements.themeController ? '‚úÖ Pr√©sent' : '‚ùå Absent');
        console.log('- Styles personnalis√©s:', elements.customStyles ? '‚úÖ Inject√©s' : '‚ùå Non inject√©s');
        console.log('- Navbar:', elements.navbar ? '‚úÖ Trouv√©e' : '‚ùå Non trouv√©e');
        console.log('- Boutons stylis√©s:', elements.buttons, 'trouv√©s');
        console.log('- Cartes stylis√©es:', elements.cards, 'trouv√©es');

        return elements;
    }

    // Fonction pour tester les performances
    function performanceTest() {
        console.log('‚ö° [PERFORMANCE] Test de performance...');
        
        const start = performance.now();
        
        // Test d'application des styles
        if (window.applyAutoThemeStyles) {
            window.applyAutoThemeStyles();
        }
        
        // Test d'acc√®s au th√®me
        for (let i = 0; i < 100; i++) {
            window.getTheme();
        }
        
        const end = performance.now();
        const duration = Math.round((end - start) * 100) / 100;
        
        console.log(`üìä Temps d'ex√©cution: ${duration}ms`);
        
        if (duration < 10) {
            console.log('üöÄ EXCELLENT! Performance optimale');
        } else if (duration < 50) {
            console.log('‚úÖ BON! Performance acceptable');
        } else {
            console.log('‚ö†Ô∏è ATTENTION! Performance √† am√©liorer');
        }
        
        return duration;
    }

    // Exposer les fonctions globalement
    window.themeValidator = {
        runFullValidation,
        quickDiagnostic,
        performanceTest,
        tests: () => tests
    };

    // Auto-validation au chargement (apr√®s un d√©lai)
    setTimeout(() => {
        if (document.readyState === 'complete') {
            console.log('üéØ [AUTO-VALIDATION] Validation automatique...');
            runFullValidation();
        }
    }, 2000);

    console.log('‚úÖ [VALIDATION] Validateur de th√®me initialis√©');
    console.log('üí° Utilisez window.themeValidator.runFullValidation() pour tester manuellement');

})();
